{
  "openapi": "3.0.0",
  "info": {
    "title": "Studying design patterns",
    "version": "1.0.0",
    "description": "A sample test patterns API",
    "license": {
      "name": "MIT",
      "url": "https://spdx.org/licenses/MIT.html"
    }
  },
  "paths": {
    "/singleton/add-log": {
      "post": {
        "description": "Check singleton pattern",
        "tags": [
          "Singleton"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingletonRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingletonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/singleton/get-log": {
      "get": {
        "description": "Check singleton pattern",
        "tags": [
          "Singleton"
        ],
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingletonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/factory/play": {
      "post": {
        "description": "Check factory pattern",
        "tags": [
          "Factory"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OneMoveResponse"
                }
              }
            }
          }
        }
      }
    },
    "/factory/get-personage-types": {
      "get": {
        "description": "Check factory method pattern. Get available personage types",
        "tags": [
          "Factory"
        ],
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonageTypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/factory/get-play-hist": {
      "get": {
        "description": "Check factory method pattern. Get gameplay history;",
        "tags": [
          "Factory"
        ],
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameplayHistoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/abstract-factory/play": {
      "post": {
        "description": "Check abstract factory pattern",
        "tags": [
          "Abstract Factory"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlayRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitGameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/abstract-factory/get-color-types": {
      "get": {
        "description": "Check factory method pattern. Get available personage types",
        "tags": [
          "Abstract Factory"
        ],
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonageTypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/builder/build-computer": {
      "post": {
        "description": "Check builder pattern",
        "tags": [
          "Builder"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/builder/list-variants": {
      "get": {
        "description": "Check factory method pattern. Get available personage types",
        "tags": [
          "Builder"
        ],
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerVariants"
                }
              }
            }
          }
        }
      }
    },
    "/prototype/create-car-wheel": {
      "post": {
        "description": "Check Prototype pattern",
        "tags": [
          "Prototype"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWheelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrototypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prototype/clone-car-wheel": {
      "post": {
        "description": "Check Prototype pattern",
        "tags": [
          "Prototype"
        ],
        "requestBody": {
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrototypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prototype/get-car-wheels": {
      "get": {
        "description": "Get all stored wheels.",
        "tags": [
          "Prototype"
        ],
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrototypeResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SingletonResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Added to singleton log"
          },
          "content": {
            "description": "Returned current Singleton log",
            "type": "array",
            "items": {
              "type": "string",
              "example": "test string 1"
            }
          }
        }
      },
      "SingletonRequest": {
        "properties": {
          "strToLog": {
            "name": "strToLog",
            "description": "Test string to put in singleton log.",
            "type": "string",
            "required": true,
            "example": "test str to add"
          }
        }
      },
      "PersonageTypeResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Shows available personage types"
          },
          "content": {
            "description": "Currently available personage types.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "queen"
            }
          }
        }
      },
      "GameplayHistoryResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Game moves hist"
          },
          "content": {
            "description": "History log",
            "type": "array",
            "items": {
              "type": "string",
              "example": "Queen moved to position (1, 5)"
            }
          }
        }
      },
      "OneMoveResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Personage has moved"
          },
          "content": {
            "description": "one move result",
            "type": "string",
            "example": "Queen moved to position (1, 5)"
          }
        }
      },
      "PlayRequest": {
        "properties": {
          "personType": {
            "name": "personType",
            "description": "Type of personage.",
            "type": "string",
            "required": true,
            "example": "king"
          },
          "x": {
            "name": "x",
            "description": "\\'x\\' coordinate.",
            "type": "int",
            "required": true,
            "example": 1
          },
          "y": {
            "name": "y",
            "description": "\\'y\\' coordinate.",
            "type": "int",
            "required": true,
            "example": 3
          }
        }
      },
      "ColorTypeResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Shows available personage colors"
          },
          "content": {
            "description": "Currently available personage colors.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "black"
            }
          }
        }
      },
      "InitGameResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Personage has moved"
          },
          "content": {
            "description": "one move result",
            "type": "string",
            "example": "Queen moved to position (1, 5)"
          }
        }
      },
      "NewPlayRequest": {
        "properties": {
          "colorType": {
            "name": "colorType",
            "description": "Type of color.",
            "type": "string",
            "required": true,
            "example": "white"
          }
        }
      },
      "ComputerVariants": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Shows available computer variants"
          },
          "content": {
            "description": "Currently available variants.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "basic"
            }
          }
        }
      },
      "ComputerResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Personage has moved"
          },
          "content": {
            "description": "Parts in build",
            "type": "array",
            "items": {
              "type": "string",
              "example": "500 GB"
            }
          }
        }
      },
      "ComputerRequest": {
        "properties": {
          "variant": {
            "name": "variant",
            "description": "Computer variant.",
            "type": "string",
            "required": false,
            "example": "basic"
          }
        }
      },
      "PrototypeResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Shows all stored wheels."
          },
          "content": {
            "description": "List of all stored wheels.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CarWheel"
            }
          }
        }
      },
      "CarWheel": {
        "properties": {
          "diameter": {
            "type": "number",
            "example": 16
          },
          "_fixingHoleNumber": {
            "type": "number",
            "example": 5
          }
        }
      },
      "CreateWheelRequest": {
        "properties": {
          "dia": {
            "name": "dia",
            "description": "Diameter of wheel.",
            "type": "number",
            "required": true,
            "example": 16
          },
          "fix": {
            "name": "fix",
            "description": "Number of fixing wholes of wheel.",
            "type": "number",
            "required": true,
            "example": 5
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Singleton",
      "description": "Singleton pattern"
    },
    {
      "name": "Factory",
      "description": "Factory method pattern"
    },
    {
      "name": "Abstract Factory",
      "description": "Abstract Factory pattern"
    },
    {
      "name": "Builder",
      "description": "Builder pattern"
    },
    {
      "name": "Prototype",
      "description": "Prototype pattern"
    }
  ]
}