{
  "openapi": "3.0.0",
  "info": {
    "title": "Studying design patterns",
    "version": "1.0.0",
    "description": "A sample test patterns API",
    "license": {
      "name": "MIT",
      "url": "https://spdx.org/licenses/MIT.html"
    }
  },
  "paths": {
    "/singleton/add-log": {
      "post": {
        "description": "Check singleton pattern",
        "tags": [
          "Singleton"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingletonRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingletonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/singleton/get-log": {
      "get": {
        "description": "Check singleton pattern",
        "tags": [
          "Singleton"
        ],
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingletonResponse"
                }
              }
            }
          }
        }
      }
    },
    "/factory/play": {
      "post": {
        "description": "Check factory pattern",
        "tags": [
          "Factory"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OneMoveResponse"
                }
              }
            }
          }
        }
      }
    },
    "/factory/get-personage-types": {
      "get": {
        "description": "Check factory method pattern. Get available personage types",
        "tags": [
          "Factory"
        ],
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonageTypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/factory/get-play-hist": {
      "get": {
        "description": "Check factory method pattern. Get gameplay history;",
        "tags": [
          "Factory"
        ],
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameplayHistoryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/abstract-factory/play": {
      "post": {
        "description": "Check abstract factory pattern",
        "tags": [
          "Abstract Factory"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlayRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitGameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/abstract-factory/get-color-types": {
      "get": {
        "description": "Check factory method pattern. Get available personage types",
        "tags": [
          "Abstract Factory"
        ],
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonageTypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/builder/build-computer": {
      "post": {
        "description": "Check builder pattern",
        "tags": [
          "Builder"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/builder/list-variants": {
      "get": {
        "description": "Check factory method pattern. Get available personage types",
        "tags": [
          "Builder"
        ],
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerVariants"
                }
              }
            }
          }
        }
      }
    },
    "/prototype/create-car-wheel": {
      "post": {
        "description": "Check Prototype pattern",
        "tags": [
          "Prototype"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWheelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrototypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prototype/clone-car-wheel": {
      "post": {
        "description": "Check Prototype pattern",
        "tags": [
          "Prototype"
        ],
        "requestBody": {
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrototypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prototype/get-car-wheels": {
      "get": {
        "description": "Get all stored wheels.",
        "tags": [
          "Prototype"
        ],
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrototypeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adapter/add-log": {
      "post": {
        "description": "Check adapter pattern",
        "tags": [
          "Adapter"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdapterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdapterResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adapter/get-log": {
      "get": {
        "description": "Check Adapter pattern",
        "tags": [
          "Adapter"
        ],
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdapterResponse"
                }
              }
            }
          }
        }
      }
    },
    "/bridge/store-data": {
      "post": {
        "description": "Check Bridge pattern",
        "tags": [
          "Bridge"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BridgeStoreRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BridgeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/bridge/get-data": {
      "get": {
        "description": "Check Bridge pattern",
        "tags": [
          "Bridge"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BridgeFindRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BridgeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/bridge/list-data-sources": {
      "get": {
        "description": "Check bridge pattern",
        "tags": [
          "Bridge"
        ],
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BridgeDataSourcesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/composite/test-composite-structure": {
      "post": {
        "description": "Check Composite pattern",
        "tags": [
          "Composite"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompositeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompositeResponse"
                }
              }
            }
          }
        }
      }
    },
    "/decorator/get-decor-types": {
      "get": {
        "description": "Decorator pattern - get available decorators",
        "tags": [
          "Decorator"
        ],
        "requestBody": {
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Response status text",
                      "type": "string",
                      "example": "OK"
                    },
                    "message": {
                      "description": "Response message text",
                      "type": "string",
                      "example": "List of available image decorators"
                    },
                    "content": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "watermarkEnable"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/decorator/save-image": {
      "post": {
        "description": "Decorator pattern - save image with options",
        "tags": [
          "Decorator"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fileInput": {
                    "description": "Emulated file",
                    "type": "string",
                    "example": "imageToSave.jpg"
                  },
                  "imageToPngEnable": {
                    "required": false,
                    "description": "Enable image to png conversion",
                    "type": "boolean",
                    "example": true
                  },
                  "watermarkEnable": {
                    "required": false,
                    "description": "Enable add watermark for image",
                    "type": "boolean",
                    "example": true
                  },
                  "thumbGenerateEnable": {
                    "required": false,
                    "description": "Enable thumbnails generation",
                    "type": "boolean",
                    "example": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Response status text",
                      "type": "string",
                      "example": "OK"
                    },
                    "message": {
                      "description": "Response message text",
                      "type": "string",
                      "example": "Image saved"
                    },
                    "content": {
                      "description": "Returned log of steps",
                      "type": "object",
                      "properties": {
                        "savedData": {
                          "description": "Emulated data",
                          "type": "string",
                          "example": "imageToSave.jpg saved to:  /path/to/images/"
                        },
                        "savingLog": {
                          "description": "Wrappers log to show steps.",
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "Thumbnails for imageToSave.jpg saved to  /path/to/thumbs/"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/strategy/get-report": {
      "get": {
        "description": "Strategy pattern",
        "tags": [
          "Strategy"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SortingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudentsReport"
                }
              }
            }
          }
        }
      }
    },
    "/strategy/list-types": {
      "get": {
        "description": "Strategy pattern",
        "tags": [
          "Strategy"
        ],
        "responses": {
          "200": {
            "description": "Successful API answer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudentsSortingTypes"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SingletonResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Added to singleton log"
          },
          "content": {
            "description": "Returned current Singleton log",
            "type": "array",
            "items": {
              "type": "string",
              "example": "test string 1"
            }
          }
        }
      },
      "SingletonRequest": {
        "properties": {
          "strToLog": {
            "name": "strToLog",
            "description": "Test string to put in singleton log.",
            "type": "string",
            "required": true,
            "example": "test str to add"
          }
        }
      },
      "PersonageTypeResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Shows available personage types"
          },
          "content": {
            "description": "Currently available personage types.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "queen"
            }
          }
        }
      },
      "GameplayHistoryResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Game moves hist"
          },
          "content": {
            "description": "History log",
            "type": "array",
            "items": {
              "type": "string",
              "example": "Queen moved to position (1, 5)"
            }
          }
        }
      },
      "OneMoveResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Personage has moved"
          },
          "content": {
            "description": "one move result",
            "type": "string",
            "example": "Queen moved to position (1, 5)"
          }
        }
      },
      "PlayRequest": {
        "properties": {
          "personType": {
            "name": "personType",
            "description": "Type of personage.",
            "type": "string",
            "required": true,
            "example": "king"
          },
          "x": {
            "name": "x",
            "description": "\\'x\\' coordinate.",
            "type": "int",
            "required": true,
            "example": 1
          },
          "y": {
            "name": "y",
            "description": "\\'y\\' coordinate.",
            "type": "int",
            "required": true,
            "example": 3
          }
        }
      },
      "ColorTypeResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Shows available personage colors"
          },
          "content": {
            "description": "Currently available personage colors.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "black"
            }
          }
        }
      },
      "InitGameResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Personage has moved"
          },
          "content": {
            "description": "one move result",
            "type": "string",
            "example": "Queen moved to position (1, 5)"
          }
        }
      },
      "NewPlayRequest": {
        "properties": {
          "colorType": {
            "name": "colorType",
            "description": "Type of color.",
            "type": "string",
            "required": true,
            "example": "white"
          }
        }
      },
      "ComputerVariants": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Shows available computer variants"
          },
          "content": {
            "description": "Currently available variants.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "basic"
            }
          }
        }
      },
      "ComputerResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Personage has moved"
          },
          "content": {
            "description": "Parts in build",
            "type": "array",
            "items": {
              "type": "string",
              "example": "500 GB"
            }
          }
        }
      },
      "ComputerRequest": {
        "properties": {
          "variant": {
            "name": "variant",
            "description": "Computer variant.",
            "type": "string",
            "required": false,
            "example": "basic"
          }
        }
      },
      "PrototypeResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Shows all stored wheels."
          },
          "content": {
            "description": "List of all stored wheels.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CarWheel"
            }
          }
        }
      },
      "CarWheel": {
        "properties": {
          "diameter": {
            "type": "number",
            "example": 16
          },
          "_fixingHoleNumber": {
            "type": "number",
            "example": 5
          }
        }
      },
      "CreateWheelRequest": {
        "properties": {
          "dia": {
            "name": "dia",
            "description": "Diameter of wheel.",
            "type": "number",
            "required": true,
            "example": 16
          },
          "fix": {
            "name": "fix",
            "description": "Number of fixing wholes of wheel.",
            "type": "number",
            "required": true,
            "example": 5
          }
        }
      },
      "AdapterResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Added to Adapter log"
          },
          "content": {
            "description": "Returned current Adapter log",
            "type": "array",
            "items": {
              "type": "string",
              "example": "test string 1"
            }
          }
        }
      },
      "AdapterRequest": {
        "properties": {
          "strToLog": {
            "name": "strToLog",
            "description": "Test string to put in Adapter log.",
            "type": "string",
            "required": true,
            "example": "test str to add"
          }
        }
      },
      "BridgeResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "User saved"
          },
          "content": {
            "description": "Returned current stored user",
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BridgeResponse"
              }
            }
          }
        }
      },
      "BridgeDataSourcesResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Available data storage types"
          },
          "content": {
            "description": "Return available data storage types",
            "type": "array",
            "items": {
              "type": "string",
              "example": "db"
            }
          }
        }
      },
      "BridgeStoreRequest": {
        "properties": {
          "repoType": {
            "name": "repoType",
            "description": "type of repository.",
            "type": "string",
            "default": "db",
            "required": false,
            "example": "db"
          },
          "name": {
            "name": "name",
            "description": "Username",
            "type": "string",
            "required": true,
            "example": "Eugene"
          },
          "email": {
            "name": "email",
            "description": "User email",
            "type": "string",
            "required": true,
            "example": "test@gmail.com"
          },
          "password": {
            "name": "password",
            "description": "User password",
            "type": "string",
            "required": true,
            "example": "password"
          }
        }
      },
      "BridgeFindRequest": {
        "properties": {
          "repoType": {
            "name": "repoType",
            "description": "type of repository.",
            "type": "string",
            "default": "db",
            "required": false,
            "example": "db"
          },
          "email": {
            "name": "email",
            "description": "User email",
            "type": "string",
            "required": true,
            "example": "test@gmail.com"
          }
        }
      },
      "UserDataModel": {
        "properties": {
          "id": {
            "name": "id",
            "description": "User ID.",
            "type": "integer",
            "example": 1
          },
          "name": {
            "name": "name",
            "description": "Username",
            "type": "string",
            "example": "Eugene"
          },
          "email": {
            "name": "email",
            "description": "User email",
            "type": "string",
            "example": "test@gmail.com"
          },
          "password": {
            "name": "password",
            "description": "User password hash",
            "type": "string",
            "example": "password hash string"
          }
        }
      },
      "CompositeResponse": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Requested tree structure created"
          },
          "content": {
            "description": "Returned emulated directories structure",
            "$ref": "#/components/schemas/Composite"
          }
        }
      },
      "CompositeRequest": {
        "properties": {
          "depth": {
            "name": "depth",
            "description": "depth of directories structure.",
            "type": "integer",
            "required": true,
            "example": 1
          },
          "filesCount": {
            "name": "filesCount",
            "description": "Files count to store in each directory",
            "type": "integer",
            "required": true,
            "example": 1
          },
          "dirsCount": {
            "name": "dirsCount",
            "description": "Directories count to put in each directory except last one.",
            "type": "integer",
            "required": true,
            "example": 2
          },
          "maxFileSize": {
            "name": "maxFileSize",
            "description": "maxFileSize",
            "type": "integer",
            "required": true,
            "example": 50
          }
        }
      },
      "Composite": {
        "properties": {
          "totalSize": {
            "name": "totalSize",
            "description": "Total size of all files in all directories.",
            "type": "integer",
            "example": 1
          },
          "dirContent": {
            "name": "dirContent",
            "description": "Directories listed content",
            "type": "array",
            "items": {
              "type": "string",
              "example": "file_0.txt 19Kb"
            }
          }
        }
      },
      "StudentsReport": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Students sorted"
          },
          "content": {
            "description": "Array of students",
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            }
          }
        }
      },
      "StudentsSortingTypes": {
        "properties": {
          "status": {
            "description": "Response status text",
            "type": "string",
            "example": "OK"
          },
          "message": {
            "description": "Response message text",
            "type": "string",
            "example": "Available types"
          },
          "content": {
            "description": "Return available students sorting types",
            "type": "array",
            "items": {
              "type": "string",
              "example": "AlphabetAsc"
            }
          }
        }
      },
      "SortingRequest": {
        "properties": {
          "type": {
            "name": "type",
            "description": "Students sorting type.",
            "type": "string",
            "default": "AlphabetAsc",
            "required": false,
            "example": "AlphabetAsc"
          }
        }
      },
      "Student": {
        "properties": {
          "mark": {
            "name": "mark",
            "description": "Student's avg mark.",
            "type": "integer",
            "example": 5
          },
          "name": {
            "name": "name",
            "description": "Student's name.",
            "type": "string",
            "example": "John Doe"
          },
          "faculty": {
            "name": "faculty",
            "description": "Student's faculty.",
            "type": "string",
            "example": "FOIT"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Singleton",
      "description": "Singleton pattern"
    },
    {
      "name": "Factory",
      "description": "Factory method pattern"
    },
    {
      "name": "Abstract Factory",
      "description": "Abstract Factory pattern"
    },
    {
      "name": "Builder",
      "description": "Builder pattern"
    },
    {
      "name": "Prototype",
      "description": "Prototype pattern"
    },
    {
      "name": "Adapter",
      "description": "Adapter pattern"
    },
    {
      "name": "Bridge",
      "description": "Bridge pattern"
    },
    {
      "name": "Composite",
      "description": "Composite pattern"
    },
    {
      "name": "Decorator",
      "description": "Decorator pattern"
    },
    {
      "name": "Strategy",
      "description": "Strategy pattern"
    }
  ]
}